I"Û$<p><code class="language-plaintext highlighter-rouge">geoextent</code> is an easy to use library for extracting the geospatial extent from data files with multiple data formats.</p>

<p>Take a look at the <a href="https://github.com/o2r-project/geoextent.git">source code on GitHub</a>, the <a href="https://pypi.org/project/geoextent/">library on PyPI</a> and the <a href="https://o2r.info/geoextent/">documentation website</a>.
You can view and test geoextent implementation through interactive notebooks on <a href="https://mybinder.org">mybinder.org</a> with a click on the following binder.</p>

<p><a href="https://mybinder.org/v2/gh/o2r-project/geoextent/master"><img src="https://mybinder.org/badge_logo.svg" alt="Binder" /></a></p>

<p>Here is a small example how to use <code class="language-plaintext highlighter-rouge">geoextent</code>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>geoextent <span class="nt">-b</span> <span class="nt">-t</span> <span class="nt">-input</span><span class="o">=</span> <span class="s1">'cities_NL.csv'</span>
</code></pre></div></div>

<p>The output will show the rectangular bounding box, time interval and crs extracted from file data, as follow:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">{</span><span class="s1">'format'</span>: <span class="s1">'text/csv'</span>,
 <span class="s1">'crs'</span>: <span class="s1">'4326'</span>,
 <span class="s1">'tbox'</span>: <span class="o">[</span><span class="s1">'30.09.2018'</span>, <span class="s1">'30.09.2018'</span><span class="o">]</span>,
 <span class="s1">'bbox'</span>: <span class="o">[</span>4.3175, 51.434444, 6.574722, 53.217222]<span class="o">}</span>
</code></pre></div></div>

<p>The input file used above was obtained from <a href="https://sandbox.zenodo.org/record/256820#.XeGcJJko85k">Zenodo</a>.
The map below<!--more--> based on <a href="https://www.openstreetmap.org/export#map=8/52.347/5.446">OpenStreetMap</a> shows the area of extracted bounding box.</p>

<p><img src="/public/images/2020-04_geoextent-map.png" alt="screenshot of example map" /></p>

<p>You can get quick usage help instructions on the command line, too:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>geoextent <span class="nt">--help</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>geoextent is a Python library <span class="k">for </span>extracting geospatial and temporal extents of a file or a directory of multiple geospatial data formats.

usage: geoextent <span class="o">[</span><span class="nt">-h</span><span class="o">]</span> <span class="o">[</span><span class="nt">-formats</span><span class="o">]</span> <span class="o">[</span><span class="nt">-b</span><span class="o">]</span> <span class="o">[</span><span class="nt">-t</span><span class="o">]</span> <span class="o">[</span><span class="nt">-input</span><span class="o">=</span> <span class="s1">'[filepath|input file]'</span><span class="o">]</span>

optional arguments:
  <span class="nt">-h</span>, <span class="nt">--help</span>            show <span class="nb">help </span>message and <span class="nb">exit</span>
  <span class="nt">-formats</span>              show supported formats
  <span class="nt">-b</span>, <span class="nt">--bounding-box</span>    extract spatial extent <span class="o">(</span>bounding box<span class="o">)</span>
  <span class="nt">-t</span>, <span class="nt">--time-box</span>        extract temporal extent
  <span class="nt">-input</span><span class="o">=</span> <span class="nv">INPUT</span><span class="o">=</span> <span class="o">[</span><span class="nv">INPUT</span><span class="o">=</span> ...]
                        input file or path

By default, both bounding box and temporal extent are extracted.

Examples:

geoextent path/to/geofile.ext
geoextent <span class="nt">-b</span> path/to/directory_with_geospatial_data
geoextent <span class="nt">-t</span> path/to/file_with_temporal_extent
geoextent <span class="nt">-b</span> <span class="nt">-t</span> path/to/geospatial_files


Supported formats:
- GeoJSON <span class="o">(</span>.geojson<span class="o">)</span>
- Tabular data <span class="o">(</span>.csv<span class="o">)</span>
- Shapefile <span class="o">(</span>.shp<span class="o">)</span>
- GeoTIFF <span class="o">(</span>.geotiff, .tif<span class="o">)</span>
</code></pre></div></div>

<h2 id="motivation">Motivation</h2>

<p>Geospatial properties of data can serve as a useful integrator of diverse data sets and can improve discovery of datasets.
However, spatial and temporal metadata is rarely used in common data repositories, such as <a href="https://zenodo.org/">Zenodo</a>.
Users may ask <em>what data is available for my area of interest over a specific time interval?</em>
This question formed the initial idea for creating a library that can serve as the basis for integration geospatial metadata in data repositories.
Because a core function is the extraction of the geospatial extent, we named it <strong><code class="language-plaintext highlighter-rouge">geoextent</code></strong>.
The data extracted using the library can be added to record metadata, which will allow users, specifically researchers, to find relevant data with less time and effort.</p>

<h2 id="origins">Origins</h2>

<p>The libraryâ€™s source code is based on two groups projects (<a href="https://github.com/KathHv/geosoftware2_ct">Cerca Trova</a> and <a href="https://github.com/carobro/Geosoftware2">Die Gruppe 1</a>) of the study project <a href="https://geosoft2.github.io/2018.html">Enhancing discovery of geospatial datasets in data repositories</a>.
We decided to develop the library with Python as we plan to integrate it with o2râ€™s metadata extraction and processing tool <a href="https://github.com/o2r-project/o2r-meta"><code class="language-plaintext highlighter-rouge">o2r-meta</code></a>.</p>

<h2 id="process-of-creating-the-codebase">Process of creating the codebase</h2>

<p>Luckily we did not have to start from scratch but could make <code class="language-plaintext highlighter-rouge">geoextent</code> a reimplementation of existing prototypes.
We roughly followed these steps:</p>

<ul>
  <li>Evaluate the existing code of the <a href="https://geosoft2.github.io/2018.html">study project groups</a>
    <ul>
      <li>Review the code implementation</li>
      <li>Identify parts of the code that are re-usable</li>
    </ul>
  </li>
  <li>Integrate chosen parts</li>
  <li>Develop of core features</li>
  <li>Set up <a href="https://travis-ci.org/github/o2r-project/geoextent/">tests on Travis CI</a></li>
  <li>Publication of library <a href="https://pypi.org/project/geoextent/">on PyPI</a></li>
  <li>Writing library documentation using <a href="https://www.sphinx-doc.org/en/master/">Sphinx</a> and render it as part of the Travis CI process</li>
  <li>Adding introduction Notebooks for easy testing with <a href="https://mybinder.org/v2/gh/o2r-project/geoextent/master">MyBinder</a></li>
</ul>

<h2 id="current-features">Current features</h2>

<ul>
  <li>Extract bounding box.
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  geoextent -b -input= 'wf_100m_klas.tif'
</code></pre></div>    </div>
    <p>Output:</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  {'format': 'image/tiff',
   'crs': '4326',
   'bbox': [5.91530075647532,
    50.3102519741084,
    9.46839871248415,
    52.5307755328733]}
</code></pre></div>    </div>
  </li>
  <li>Extract time interval
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  geoextent -t -input= 'muenster_ring_zeit.geojson'
</code></pre></div>    </div>
    <p>Output:</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  {'format': 'application/geojson',
   'crs': 4326,
   'tbox': ['2018-11-14', '2018-11-14']}

</code></pre></div>    </div>
  </li>
  <li>Show coordinate reference system (CRS) used</li>
  <li>Supported formats:
    <ul>
      <li>GeoJSON (.geojson)</li>
      <li>Tabular data (.csv)</li>
      <li>Shapefile (.shp)</li>
      <li>GeoTIFF (.geotiff, .tif)</li>
    </ul>
  </li>
</ul>

<p>For more examples, see <a href="https://o2r.info/geoextent/">documentation</a>.</p>

<h2 id="next-steps">Next steps</h2>

<p>As an immediate next steps, we want to integrate the extraction of extents into <code class="language-plaintext highlighter-rouge">or2-meta</code> so that users creating an ERC will have to do less manual metadata creation.
We also hope that <code class="language-plaintext highlighter-rouge">geoextent</code> is useful to others and have plenty ideas about extending the library.
For example, being a Python project, we would like to explore integrating <code class="language-plaintext highlighter-rouge">geoextent</code> into Zenodo.
Most importantly, we will add support for multiple files and directories, but also further data formats - see <a href="https://github.com/o2r-project/geoextent/issues">project issues on GitHub</a>.
<em>We welcome your ideas, feature requests, comments, and of course contributions!</em></p>
:ET